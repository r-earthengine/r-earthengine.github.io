<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>image on </title>
    <link>https://r-earthengine.github.io/categories/image/</link>
    <description>Recent content in image on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 05 Jan 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://r-earthengine.github.io/categories/image/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Image Visualization</title>
      <link>https://r-earthengine.github.io/image_02/</link>
      <pubDate>Sun, 05 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://r-earthengine.github.io/image_02/</guid>
      <description>Adapted from Google Earth Engine Documentation.
You can visualize an image using Map$addLayer(). If you add a layer to the map without any additional parameters, by default the rgee assigns the first three bands to red, green and blue, respectively. The default stretch is based on the type of data in the band (e.g.Â floats are stretched in [0,1], 16-bit data are stretched to the full range of possible values), which may or may not be suitable.</description>
    </item>
    
    <item>
      <title>Image Overview</title>
      <link>https://r-earthengine.github.io/image_01/</link>
      <pubDate>Sat, 04 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://r-earthengine.github.io/image_01/</guid>
      <description>Adapted from Google Earth Engine Documentation.
raster data are represented as Image objects in Earth Engine. Images are composed of one or more bands and each band has its own name, data type, scale, mask and projection. Each image has metadata stored as a set of properties.
 addClassKlippyToPreCode(); addClassKlippyTo(&#34;pre.r, pre.markdown&#34;); addKlippy(&#39;right&#39;, &#39;top&#39;, &#39;auto&#39;, &#39;1&#39;, &#39;Click to copy&#39;, &#39;Done&#39;);  1. ee.Image constructor Images can be loaded by pasting an Earth Engine asset ID into the ee$Image constructor.</description>
    </item>
    
  </channel>
</rss>
