<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on </title>
    <link>https://r-earthengine.github.io/posts/</link>
    <description>Recent content in Posts on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 06 Jan 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://r-earthengine.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>basic rgee - Best practices</title>
      <link>https://r-earthengine.github.io/intro_03/</link>
      <pubDate>Mon, 06 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://r-earthengine.github.io/intro_03/</guid>
      <description>Adapted from Google Earth Engine Documentation.
This doc describes coding practices that are intended to maximize the chance of success for complex or expensive Earth Engine computations.
 addClassKlippyToPreCode(); addClassKlippyTo(&#34;pre.r, pre.markdown&#34;); addKlippy(&#39;right&#39;, &#39;top&#39;, &#39;auto&#39;, &#39;1&#39;, &#39;Click to copy&#39;, &#39;Done&#39;);  1. Avoid mixing client functions and objects with server functions and objects Earth Engine server objects are objects with constructors that start with ee (e.g. ee$Image, ee$Reducer) and any methods on such objects are server functions.</description>
    </item>
    
    <item>
      <title>basic rgee - Consideration</title>
      <link>https://r-earthengine.github.io/intro_02/</link>
      <pubDate>Mon, 06 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://r-earthengine.github.io/intro_02/</guid>
      <description>Thanks to reticulate embedding a Python session within an R session, rgee and the Earth Engine Python API share the same modules, classes, functions, and methods. In other words, the logic of the syntax is the same and just as fast (just change . by a $). Notwithstanding, differences in the language design of R and Python might cause some problems in specific scenarios. We identify three bug-potential cases.</description>
    </item>
    
    <item>
      <title>basic rgee - First steps</title>
      <link>https://r-earthengine.github.io/intro_01/</link>
      <pubDate>Sun, 05 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://r-earthengine.github.io/intro_01/</guid>
      <description>1. What is Google Earth Engine ? Google Earth Engine is a computing platform that allows users to run geospatial analysis on Google’s infrastructure. There are several ways to interact with the platform:
 Explorer Code Editor Javascript client library Python client library R client library  This website is focused on the last one, you can use the R client library to send/receive messages to/from the Earth Engine server and development web applications.</description>
    </item>
    
    <item>
      <title>Imagen Overview</title>
      <link>https://r-earthengine.github.io/intro_01/</link>
      <pubDate>Sun, 05 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://r-earthengine.github.io/intro_01/</guid>
      <description>addClassKlippyToPreCode(); addClassKlippyTo(&#34;pre.r, pre.markdown&#34;); addKlippy(&#39;right&#39;, &#39;top&#39;, &#39;auto&#39;, &#39;1&#39;, &#39;Click to copy&#39;, &#39;Done&#39;);  1. What is Google Earth Engine ? Google Earth Engine is a computing platform that allows users to run geospatial analysis on Google’s infrastructure. There are several ways to interact with the platform:
 Explorer Code Editor Javascript client library Python client library R client library  This website is focused on the last one, you can use the R client library to send/receive messages to/from the Earth Engine server and development web applications.</description>
    </item>
    
  </channel>
</rss>
